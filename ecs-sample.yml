Resources:
  # VPC and subnets would typically be defined or referred to here, but are omitted for brevity.

  # ALB for the ECS service
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [Ref: SubnetA, Ref: SubnetB] # Refer to your subnet IDs here

  # Listener for the ALB to terminate SSL
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: Ref: LoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: "arn:aws:acm:region:account-id:certificate/certificate-id" # Replace with your ACM certificate ARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: Ref: TargetGroup

  # Target group for the ALB to check the health of the nginx container
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      VpcId: Ref: VPC # Refer to your VPC ID here
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/" # Health check path for nginx

  # ECS cluster for the service
  ECSCluster:
    Type: AWS::ECS::Cluster

  # ECS task definition for the nginx and nodejs containers
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: nginx-nodejs-app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256' # Define as needed
      Memory: '0.5GB' # Define as needed
      ExecutionRoleArn: # ARN of a role for pulling the images and logging
      ContainerDefinitions:
        - Name: nginx
          Image: nginx:latest
          PortMappings:
            - ContainerPort: 443
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f https://localhost/ || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
        - Name: nodejs-app
          Image: your-nodejs-app-image # Replace with your nodejs app image
          # No need for PortMappings here since nginx forwards traffic to this container

  # ECS service for the task definition and cluster
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: Ref: ECSCluster
      TaskDefinition: Ref: ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Ref: SubnetA
            - Ref: SubnetB
          SecurityGroups:
            - Ref: YourSecurityGroupId # Replace with your security group ID
      LoadBalancers:
        - TargetGroupArn: Ref: TargetGroup
          ContainerName: nginx
          ContainerPort: 443

Outputs:
  LoadBalancerDNS:
    Description: 'The DNS name of the load balancer'
    Value: !GetAtt [LoadBalancer, DNSName]

