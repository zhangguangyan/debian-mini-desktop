.
├── docker-compose.yml
├── Dockerfile
├── otel-collector-config.yaml
├── prometheus
│   └── prometheus.yml
├── otel.js
└── app.js
--
version: '3.7'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    ports:
      - "4317:4317"
      - "55681:55681"
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]

  app:
    build: .
    container_name: app
    ports:
      - "3000:3000"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - otel-collector

---
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8888']
---
receivers:
  otlp:
    protocols:
      grpc:
      http:

exporters:
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"

service:
  pipelines:
    metrics:
      receivers: [otlp]
      exporters: [prometheusremotewrite]
---
FROM node:14

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

CMD ["node", "app.js"]
--- otel.js
const { MeterProvider } = require('@opentelemetry/sdk-metrics-base');
const { PrometheusExporter } = require('@opentelemetry/exporter-prometheus');

const exporter = new PrometheusExporter({
  startServer: true,
}, () => {
  console.log('Prometheus scrape endpoint: http://localhost:9464/metrics');
});

const meter = new MeterProvider({
  exporter,
  interval: 1000,
}).getMeter('example-meter');

const requestCount = meter.createCounter('requests', {
  description: 'Count of requests',
});

module.exports = { requestCount };

--- app.js

const { requestCount } = require('./otel');

// Example: Instrument an Express.js app
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  requestCount.add(1);
  res.send('Hello, OpenTelemetry!');
});

app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});
